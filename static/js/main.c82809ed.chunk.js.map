{"version":3,"sources":["api/trivia.js","components/AnswerList.js","components/Button.js","components/Divider.js","components/Question.js","api/giphy.js","keys.js","components/Results.js","components/App.js","index.js"],"names":["fetchQuestions","a","fetch","then","response","json","results","formatQuestions","fetchedQuestions","map","question","correct","incorrect","correct_answer","decode","incorrect_answers","answer","category","allAnswers","concat","sort","Math","random","guessedAnswer","questions","getQuestions","List","styled","ul","ListItem","li","AnswerList","setSelectedAnswer","selectedAnswer","QuestionBtn","index","selected","onClick","Button","button","Divider","div","Container","shake","keyframes","NextBtn","props","css","NextBtnText","span","NextIcon","NavigateNext","Title","h4","Question","nextQuestion","submitAnswer","useState","setShake","setTimeout","fetchGif","responseText","console","log","data","QuestionTitle","correctGuess","ResultMsg","correctGuessBg","incorrectGuessBg","correctAnswer","CorrectIcon","CheckCircleFill","IncorrectIcon","CircleWithCross","NewGameIcon","CircleWithPlus","NewGameBtn","Results","newGame","resultGif","setResultGif","scoreResponse","useCallback","badScore","goodScore","score","i","length","round","getScorePercentage","floor","renderAnswers","answers","_","uniqueId","useEffect","src","images","downsized","url","alt","title","getScore","App","setQuestions","currentQuestion","setCurrentQuestion","gameCompleted","setGameCompleted","setFirstQuestion","questionArray","findIndex","includes","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.c82809ed.chunk.js","sourcesContent":["import { decode } from 'html-entities';\n\nasync function fetchQuestions() {\n  const response = await fetch('https://opentdb.com/api.php?amount=1').then((response) =>\n    response.json()\n  );\n  return response.results;\n}\n\nfunction combineAnswers(correct, incorrect) {\n  return incorrect.concat(correct).sort(() => Math.random() - 0.5);\n}\n\nfunction formatQuestions(fetchedQuestions) {\n  return fetchedQuestions.map((question) => {\n    const correct_answer = decode(question.correct_answer);\n    const incorrect_answers = question.incorrect_answers.map((answer) => decode(answer));\n    return {\n      question: decode(question.question),\n      category: question.category,\n      incorrect_answers: incorrect_answers,\n      correct_answer: correct_answer,\n      allAnswers: combineAnswers(correct_answer, incorrect_answers),\n      guessedAnswer: '',\n    };\n  });\n}\n\nasync function getQuestions() {\n  const questions = await fetchQuestions().then((response) => formatQuestions(response));\n  return formatQuestions(questions);\n}\n\nexport default getQuestions;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n  padding-left: 0;\n  margin-bottom: 2em;\n`;\nconst ListItem = styled.li`\n  list-style-type: none;\n`;\n\nexport const AnswerList = ({ question, setSelectedAnswer, selectedAnswer, QuestionBtn }) => {\n  function renderAnswers() {\n    return question.allAnswers.map((answer, index) => {\n      return (\n        <ListItem key={index}>\n          <QuestionBtn\n            selected={selectedAnswer === answer ? true : false}\n            onClick={() => setSelectedAnswer(answer)}\n          >\n            {answer}\n          </QuestionBtn>\n        </ListItem>\n      );\n    });\n  }\n  return <List>{renderAnswers()}</List>;\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  background: ${'#e0e0e0'};\n  border: none;\n  border-radius: 8px;\n  padding: 1em;\n  margin-bottom: 2em;\n  width: 15em;\n  font-size: 1rem;\n  font-family: 'Source Sans Pro', sans-serif;\n  &:focus {\n    outline: none;\n  }\n  &:hover {\n    cursor: pointer;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Divider = styled.div`\n  height: 2px;\n  background: #e0e0e0;\n  width: 24em;\n  margin-bottom: 2em;\n`;\n","import React, { useState } from 'react';\nimport styled, { keyframes, css } from 'styled-components';\nimport { decode } from 'html-entities';\nimport { AnswerList } from './AnswerList';\nimport { NavigateNext } from '@styled-icons/material-outlined/';\nimport { Button } from './Button';\nimport { Divider } from './Divider';\n\nconst Container = styled.div`\n  display: flex;\n  padding: 2em;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst shake = keyframes`\n    10%, 90% {\n    transform: translate3d(-1px, 0, 0);\n  }\n  \n  20%, 80% {\n    transform: translate3d(2px, 0, 0);\n  }\n\n  30%, 50%, 70% {\n    transform: translate3d(-4px, 0, 0);\n  }\n\n  40%, 60% {\n    transform: translate3d(4px, 0, 0);\n  }\n`;\nconst NextBtn = styled(Button)`\n  background: #2f80ed;\n  color: #f2f2f2;\n  font-weight: 600;\n  display: inline-grid;\n  align-items: center;\n  justify-items: center;\n  padding: 0.75em;\n  grid-template-columns: 20% 60% 20%;\n  animation: ${(props) =>\n    props.shake &&\n    css`\n      ${shake} 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both\n    `};\n\n  &:hover {\n    background: #2159a4;\n  }\n`;\nconst NextBtnText = styled.span`\n  grid-column: 2;\n`;\nconst NextIcon = styled(NavigateNext)`\n  height: 2rem;\n  grid-column: 3;\n`;\n\nconst QuestionBtn = styled(Button)`\n  background: ${(props) => (props.selected ? '#4F4F4F' : '#e0e0e0')};\n  color: ${(props) => (props.selected ? '#F2F2F2' : 'black')};\n  font-weight: ${(props) => (props.selected ? '600' : '400')};\n  box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 25%);\n  &:hover {\n    background: ${(props) => (props.selected ? '#4F4F4F' : '#bdbdbd')};\n    box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 50%);\n  }\n`;\nconst Title = styled.h4`\n  font-family: 'Montserrat', sans-serif;\n  font-size: 1.5rem;\n  font-weight: 400;\n  margin-bottom: 2em;\n  text-align: center;\n`;\n\nexport const Question = ({ question, nextQuestion, submitAnswer }) => {\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [shake, setShake] = useState(false);\n\n  function shakeButton() {\n    setShake(true);\n    setTimeout(() => {\n      setShake(false);\n    }, 1000);\n  }\n  function onNextQuestionClick() {\n    if (selectedAnswer !== null) {\n      submitAnswer(selectedAnswer);\n      setSelectedAnswer(null);\n      nextQuestion();\n    } else {\n      shakeButton();\n    }\n  }\n  return (\n    <Container>\n      <Title>{decode(question.question)}</Title>\n      <p>Category: {question.category}</p>\n      <AnswerList\n        question={question}\n        selectedAnswer={selectedAnswer}\n        setSelectedAnswer={setSelectedAnswer}\n        QuestionBtn={QuestionBtn}\n      />\n      <Divider></Divider>\n      <NextBtn onClick={onNextQuestionClick} shake={shake}>\n        <NextBtnText>Next</NextBtnText>\n        <NextIcon />\n      </NextBtn>\n    </Container>\n  );\n};\n","import { giphyKey } from '../keys';\n\nexport const fetchGif = async (responseText) => {\n  const response = await fetch(\n    `https://api.giphy.com/v1/gifs/search?api_key=${giphyKey}&q=${responseText}&limit=1&offset=0&rating=g&lang=en`\n  ).then((response) => response.json());\n  console.log(response.data[0]);\n  return response.data[0];\n};\n","export const giphyKey = 'B7vQThLCaJ3KROTD7Dgf6JgRqIMVn9Gj';\n","import React, { useEffect, useState, useCallback } from 'react';\nimport _ from 'lodash';\nimport styled from 'styled-components';\nimport { Button } from './Button';\nimport { fetchGif } from '../api/giphy';\nimport { CheckCircleFill } from '@styled-icons/bootstrap/';\nimport { CircleWithCross } from '@styled-icons/entypo/';\nimport { CircleWithPlus } from '@styled-icons/entypo/';\nimport { Divider } from './Divider';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 2em;\n`;\nconst QuestionTitle = styled.h4`\n  color: ${({ correctGuess }) => (correctGuess ? '#27AE60' : '#EB5757')};\n`;\nconst ResultMsg = styled.h4`\n  font-size: 1.5rem;\n  font-weight: 600;\n`;\nconst List = styled.ul`\n  list-style-type: none;\n  padding-left: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst ListItem = styled.li`\n  display: inline-grid;\n  width: 16em;\n  grid-template-columns: 80% 20%;\n  margin: 1em;\n  padding: 1em;\n  border-radius: 8px;\n  background: ${({ correctGuessBg, incorrectGuessBg }) =>\n    correctGuessBg ? '#27AE60' : incorrectGuessBg ? '#EB5757' : '#E0E0E0'};\n  color: ${({ correctGuessBg, incorrectGuessBg, correctAnswer }) =>\n    correctGuessBg || incorrectGuessBg ? '#FFFFFF' : correctAnswer ? '#27AE60' : '#000000'};\n  font-weight: ${({ correctGuessBg, incorrectGuessBg, correctAnswer }) =>\n    correctGuessBg || incorrectGuessBg || correctAnswer ? '600' : '400'};\n  box-sizing: border-box;\n  border: ${({ correctAnswer }) => (correctAnswer ? '2px solid #27AE60' : 'none')};\n`;\nconst CorrectIcon = styled(CheckCircleFill)`\n  height: 1.5em;\n  color: white;\n`;\nconst IncorrectIcon = styled(CircleWithCross)`\n  height: 1.5em;\n  color: white;\n`;\nconst NewGameIcon = styled(CircleWithPlus)`\n  height: 1.5em;\n  color: white;\n`;\nconst NewGameBtn = styled(Button)`\n  display: inline-grid;\n  grid-template-columns: 80% 20%;\n  width: 16em;\n  background: #2f80ed;\n  color: white;\n  font-weight: 600;\n  &:hover {\n    background: #2159a4;\n  }\n`;\n\nexport const Results = ({ newGame, questions }) => {\n  const [resultGif, setResultGif] = useState(null);\n\n  const scoreResponse = useCallback((questions) => {\n    const badScore = ['Damn', \"That's bad\", 'Oh no', 'Try again'];\n    const goodScore = ['Well Done', \"That's amazing!\", 'You are great'];\n    const score = getScorePercentage(questions);\n\n    if (score < 50) {\n      return badScore[Math.floor(Math.random() * badScore.length)];\n    } else {\n      return goodScore[Math.floor(Math.random() * goodScore.length)];\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchGif(scoreResponse(questions)).then((response) => setResultGif(response));\n  }, [questions, scoreResponse]);\n\n  function onNewGame() {\n    newGame();\n  }\n  function getScore(questions) {\n    if (!questions) {\n      return;\n    }\n    let score = 0;\n    for (let i = 0; i < questions.length; i++) {\n      if (questions[i].guessedAnswer === questions[i].correct_answer) {\n        score += 1;\n      }\n    }\n    return score;\n  }\n  function getScorePercentage(questions) {\n    let score = 0;\n    for (let i = 0; i < questions.length; i++) {\n      if (questions[i].guessedAnswer === questions[i].correct_answer) {\n        score += 1;\n      }\n    }\n    return Math.round((score / questions.length) * 100);\n  }\n  function renderAnswers(answers, index) {\n    return answers.map((answer) => {\n      return (\n        <ListItem\n          key={_.uniqueId()}\n          correctGuessBg={\n            answer === questions[index].correct_answer && answer === questions[index].guessedAnswer\n              ? true\n              : false\n          }\n          incorrectGuessBg={\n            answer !== questions[index].correct_answer && answer === questions[index].guessedAnswer\n              ? true\n              : false\n          }\n          correctAnswer={\n            answer === questions[index].correct_answer && answer !== questions[index].guessedAnswer\n              ? true\n              : false\n          }\n        >\n          {answer}\n          {answer === questions[index].guessedAnswer ? (\n            answer === questions[index].correct_answer ? (\n              <CorrectIcon />\n            ) : (\n              <IncorrectIcon />\n            )\n          ) : null}\n        </ListItem>\n      );\n    });\n  }\n\n  function renderResults() {\n    return questions.map((question, index) => {\n      return (\n        <div key={index}>\n          <QuestionTitle correctGuess={question.correct_answer === question.guessedAnswer}>\n            Q: {question.question}\n          </QuestionTitle>\n          <List>{renderAnswers(question.allAnswers, index)}</List>\n        </div>\n      );\n    });\n  }\n  return (\n    <Container>\n      <ResultMsg>{scoreResponse(questions)}</ResultMsg>\n      {resultGif && <img src={resultGif.images.downsized.url} alt={resultGif.title} />}\n      <h1>\n        Correct: {getScore(questions)}/{questions.length}\n      </h1>\n      {renderResults()}\n      <Divider />\n      <NewGameBtn onClick={onNewGame}>\n        New Game\n        <NewGameIcon />\n      </NewGameBtn>\n    </Container>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport getQuestions from '../api/trivia';\nimport { Question } from './Question';\nimport { Results } from './Results';\n\nconst App = () => {\n  const [questions, setQuestions] = useState(null);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [gameCompleted, setGameCompleted] = useState(false);\n\n  useEffect(() => {\n    getQuestions().then((response) => {\n      setQuestions(response);\n      setFirstQuestion(response);\n    });\n  }, []);\n\n  function setFirstQuestion(questionArray) {\n    setCurrentQuestion(questionArray[0]);\n  }\n\n  function nextQuestion() {\n    if (questions.findIndex((question) => question === currentQuestion) === questions.length - 1) {\n      setGameCompleted(true);\n    } else {\n      setCurrentQuestion(\n        questions[questions.findIndex((question) => question === currentQuestion) + 1]\n      );\n    }\n  }\n  function submitAnswer(answer) {\n    setQuestions(\n      questions.map((question) => {\n        return question.allAnswers.includes(answer)\n          ? { ...question, guessedAnswer: answer }\n          : question;\n      })\n    );\n  }\n  function newGame() {\n    getQuestions().then((response) => {\n      setQuestions(response);\n      setFirstQuestion(response);\n    });\n    setGameCompleted(false);\n  }\n\n  if (gameCompleted) {\n    return <Results newGame={newGame} questions={questions} />;\n  } else {\n    return (\n      <div>\n        {currentQuestion && (\n          <Question\n            question={currentQuestion}\n            nextQuestion={nextQuestion}\n            submitAnswer={submitAnswer}\n          />\n        )}\n      </div>\n    );\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './style.css';\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}